#!/usr/bin/env bash
#
# @LICENSE  Apache-2.0
# @AUTHOR   Hasnae R.
# @VERSION  1.0.0
#

source selfedit.sh

##############
# HOUSEKEEPING
##############

# @COMMAND addkey                           adds ssh key
addkey() {
    ssh-add -K ~/.ssh/id_rsa
}

# @COMMAND audit [size?]                    checks for folders larger than 500MB in the current directory
audit() {
    max=$(_default '500000')
    sudo du -k * | awk "\$1 > $max" | sort -nr
}

# @COMMAND portid [port]                    displays process listening on target port
portid() {
    lsof -i :$1
}

# @COMMAND src                              changes directory to viqueen sources dir
src() {
  cd ${VIQUEEN_DEVBOX_HOME}/..
}

#####
# GIT
#####

# @COMMAND gl                               pretty git log
gl() {
    git log \
        --graph \
        --full-history \
        --color \
        --date=iso \
        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%x1b[35m%ad %x1b[0m%s %x1b[35m(%aE)""]]]]]]"
}

# @COMMAND master [count?]                  top commiters to the repo
masters() {
    count=$(_default $1 40)
    git log --format=format:%an | sort | uniq -c | sort -r | head -n +${count}
}

commit() {
  message=${@}
  branch_name=$(git rev-parse --abbrev-ref HEAD)
  prefix="noissue"
  if [[ ${branch_name} =~ ^(.*)/([A-Z]+-[0-9]+)-(.*)$ ]]; then
    prefix=${BASH_REMATCH[2]}
  fi
  git commit -m "${prefix}: ${message}"
}

# @COMMAND pull                             git pull from upstream
pull() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git pull origin ${upstream}
}

# @COMMAND push                             git push to upstream
push() {
    upstream=$(git branch | sed -n '/\* /s///p')
    git push origin ${upstream}
}

# @COMMAND recent                           recent git branches
recent() {
    git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'
}

# @COMMAND merged                           list merged branches
merged() {
  git branch --merged | egrep -v "(^\*|master|release)"
}

#######
# MAVEN
#######

# @COMMAND build                            runs threaded maven build with skipping tests
build() {
    mvn -e -T 0.75C clean install -DskipTests=true
}

# @COMMAND setver                           interactively updates the maven version of a project
setver() {
    mvn release:update-versions -DautoVersionSubmodules=true -DgenerateBackupPoms=false
}

# @COMMAND release                          runs a maven release
release() {
    mvn -B -DskipTests -Darguments=-DskipTests release:clean release:prepare release:perform
}

# @COMMAND setpro                           sets a property value
setprop() {
  property_name=${1}
  property_value=${2}
  mvn versions:set-property -Dproperty=${property_name} -DnewVersion=${property_value} -DgenerateBackupPoms=false
}

eval $@

if [ -z $1 ];
then
    cd ${VIQUEEN_DEVBOX_HOME}
fi
